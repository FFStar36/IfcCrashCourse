/*.btn-secondary{*/
/*    background-color: lightgray !important;*/
/*}*/

/*Anzeigen von Messungen*/
.ifcjs-dimension-preview {
    width: 1rem;
    height: 1rem;
    background-color: #FFA50F;
    border-radius: 1rem;
    opacity: 0.5;
}

.ifcjs-dimension-label {
    background-color: black;
    color: white;
    padding: 4px;
    border-radius: 4px;
}

#ifc-tree-menu {
    position: absolute;
    overflow-y: scroll;
    background-color: white;
    height: 70vh;
}

li ul {
    user-select: none;
    cursor: pointer;
}

/* Remove default bullets */
ul, #myUL {
    list-style-type: none;
}

/* Remove margins and padding from the parent ul */
#myUL {
    margin: 0.5rem;
    padding: 0;
}

/* Style the caret/arrow */
.caret {
    cursor: pointer;
    user-select: none; /* Prevent text selection */
}

/* Create the caret/arrow with a unicode, and style it */
.caret::before {
    content: "\25B6";
    color: black;
    display: inline-block;
    margin-right: 6px;
}

/* Rotate the caret/arrow icon when clicked on (using JavaScript) */
.caret-down::before {
    transform: rotate(90deg);
}

/* Hide the nested list */
.nested {
    display: none;
    margin-left: 1.5rem;
}

/* Show the nested list when the user clicks on the caret/arrow (with JavaScript) */
.active {
    display: block;
    margin-left: 10px;
}

#viewer-container{
    height: 95%;
    width: 90%;
}

.ExportPlans{
    width: 75px;
    height: 75px;
    background: url("../icons/pdf.png");
    background-repeat: no-repeat;
    background-size: 75px 75px;

    background-color: transparent;
    border: none;
    cursor: pointer;
    overflow: hidden;
    outline: none;
    position: absolute;

    bottom: 10%;
    margin-right: 100px;
}

#measureButton:hover, #clipperButton:hover {
    background-color: lightgray;
    box-shadow: -4px 12px 17px -10px rgba(0,0,0,0.44)
}


#measureButton, #clipperButton{
    position: absolute;
    margin-top: 35%;


    height: 50px;
    width: 80px;
    /*border-radius: 50%;*/
    border: 2px solid gray;
    transition-duration: 0.4s;
    cursor: pointer;
    bottom: 10%;
}

#measureButton{
    margin-right: 150px;

    background-image: url("../icons/measure.png");
    background-color: white;
    background-repeat: no-repeat;
    background-size: 40px 40px;
    background-position: center center;
}

#clipperButton{
    margin-left: 150px;

    background-image: url("../icons/cut.png");
    background-color: white;
    background-repeat: no-repeat;
    background-size: 40px 40px;
    background-position: center center;
}

#scrollbar{
    overflow-y: auto;
}



/**/

@keyframes blink {
    /**
     * At the start of the animation the dot
     * has an opacity of .2
     */
    0% {
        opacity: .2;
    }
    /**
     * At 20% the dot is fully visible and
     * then fades out slowly
     */
    20% {
        opacity: 1;
    }
    /**
     * Until it reaches an opacity of .2 and
     * the animation can start again
     */
    100% {
        opacity: .2;
    }
}

.loadingModel{
    font-size: 10rem;
    position: absolute;
    margin-top: 15%;
    color: gray;
}

.loadingInfo{
    font-size: 2rem;
    color: gray;
    margin-left: 1rem;
}

#loading span {
    /**
     * Use the blink animation, which is defined above
     */
    animation-name: blink;
    /**
     * The animation should take 1.4 seconds
     */
    animation-duration: 1.4s;
    /**
     * It will repeat itself forever
     */
    animation-iteration-count: infinite;
    /**
     * This makes sure that the starting style (opacity: .2)
     * of the animation is applied before the animation starts.
     * Otherwise we would see a short flash or would have
     * to set the default styling of the dots to the same
     * as the animation. Same applies for the ending styles.
     */
    animation-fill-mode: both;
}

#loading span:nth-child(2) {
    /**
     * Starts the animation of the third dot
     * with a delay of .2s, otherwise all dots
     * would animate at the same time
     */
    animation-delay: .2s;
}

#loading span:nth-child(3) {
    /**
     * Starts the animation of the third dot
     * with a delay of .4s, otherwise all dots
     * would animate at the same time
     */
    animation-delay: .4s;
}